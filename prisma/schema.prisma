// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  posyanduId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Role {
  id            String @id @default(cuid())
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Puskesmas {
  id            String @id @default(cuid())
  provinceId    String
  cityId        String
  subDistrictId String
  villageId     String
  name          String
  address       String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Posyandu {
  id            String @id @default(cuid())
  puskesmasId   String
  name          String
  address       String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Province {
  id            String @id @default(cuid())
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model City {
  id            String @id @default(cuid())
  provinceId    String
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SubDistrict {
  id            String @id @default(cuid())
  provinceId    String
  cityId        String
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Village {
  id            String @id @default(cuid())
  provinceId    String
  cityId        String
  subDistrictId String
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Member {
  id            String @id @default(cuid())
  nik           String @unique
  name          String
  dateOfBirth   DateTime
  motherName    String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MedicalRecord {
  id            String @id @default(cuid())
  memberId      String
  diagnosis     String
  treatment     String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Checkup {
  id                  String @id @default(cuid())
  memberId            String
  height              Float
  weight              Float
  headCircumference   Float
  age                 Int
  status              String
  checkupDate         DateTime

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}